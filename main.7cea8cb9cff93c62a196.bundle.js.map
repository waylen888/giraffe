{"version":3,"file":"main.7cea8cb9cff93c62a196.bundle.js","sources":["webpack:///./src/helpers.tsx"],"sourcesContent":["import * as React from 'react'\nimport {select, text, boolean, number} from '@storybook/addon-knobs'\n\nimport {Table} from '../../giraffe/src'\nimport {CPU} from './data/cpu'\nimport {CPUString} from './data/cpuString'\n\nimport * as giraffe from '../../giraffe/src'\n\nexport const PlotContainer = ({children}) => (\n  <div\n    style={{\n      width: 'calc(100vw - 100px)',\n      height: 'calc(100vh - 100px)',\n      margin: '50px',\n    }}\n  >\n    {children}\n  </div>\n)\n\nconst multiSelect = (\n  label: string,\n  options: string[],\n  defaultValues: string[]\n): string[] => {\n  const values = []\n\n  options.forEach((value: string) => {\n    const checkboxLabel = `${label}: ${value}`\n\n    const selected = boolean(checkboxLabel, defaultValues.includes(value))\n\n    if (selected) {\n      values.push(value)\n    }\n  })\n\n  return values\n}\n\nexport const tickFontKnob = (initial?: string) =>\n  text('Tick Font', initial || '10px sans-serif')\n\nexport const legendFontKnob = (initial?: string) =>\n  text('Legend Font', initial || '12px sans-serif')\n\nexport const colorSchemeKnob = (initial?: string[]) =>\n  select(\n    'Color Scheme',\n    {\n      'Nineteen Eighty Four': giraffe.NINETEEN_EIGHTY_FOUR,\n      Atlantis: giraffe.ATLANTIS,\n      'Do Androids Dream': giraffe.DO_ANDROIDS_DREAM,\n      Delorean: giraffe.DELOREAN,\n      Cthulhu: giraffe.CTHULHU,\n      Ectoplasm: giraffe.ECTOPLASM,\n      'T Max 400 Film': giraffe.T_MAX_400_FILM,\n      Viridis: giraffe.VIRIDIS,\n      Magma: giraffe.MAGMA,\n      Inferno: giraffe.INFERNO,\n      Plasma: giraffe.PLASMA,\n      ylOrRd: giraffe.YL_OR_RD,\n      ylGnBu: giraffe.YL_GN_BU,\n      buGn: giraffe.BU_GN,\n    },\n    initial || giraffe.NINETEEN_EIGHTY_FOUR\n  )\n\nexport const tableKnob = (initial?: Table) =>\n  select('Data', {CPU, CPUString}, initial || CPU)\n\n/*\n  Find all column keys in a table suitable for mapping to the `x` or `y`\n  aesthetic, and retun as a map from column keys to column names.\n*/\nconst findXYColumns = (table: Table) =>\n  table.columnKeys.reduce((acc, k) => {\n    const columnType = table.getColumnType(k)\n\n    if (columnType !== 'number' && columnType !== 'time') {\n      return acc\n    }\n\n    return {\n      ...acc,\n      [k]: table.getColumnName(k),\n    }\n  }, {})\n\nexport const findStringColumns = (table: Table) =>\n  table.columnKeys.filter(k => table.getColumnType(k) === 'string')\n\nexport const xKnob = (table: Table, initial?: string) =>\n  select('x', findXYColumns(table), initial || '_time')\n\nexport const yKnob = (table: Table, initial?: string) =>\n  select('y', findXYColumns(table), initial || '_value' || 'cpu')\n\nexport const fillKnob = (table: Table, initial?: string[]) =>\n  multiSelect('fill', findStringColumns(table), initial || ['cpu'])\n\nexport const symbolKnob = (table: Table, initial?: string[]) =>\n  multiSelect('symbol', findStringColumns(table), initial || ['host'])\n\nexport const interpolationKnob = () =>\n  select(\n    'Interpolation',\n    {\n      linear: 'linear',\n      monotoneX: 'monotoneX',\n      monotoneY: 'monotoneY',\n      cubic: 'cubic',\n      step: 'step',\n      stepBefore: 'stepBefore',\n      stepAfter: 'stepAfter',\n      natural: 'natural',\n    },\n    'monotoneX'\n  )\n\nexport const xScaleKnob = () =>\n  select(\n    'X-Scale',\n    {\n      linear: 'linear',\n      log: 'log',\n    },\n    'linear'\n  )\n\nexport const yScaleKnob = () =>\n  select(\n    'Y-Scale',\n    {\n      linear: 'linear',\n      log: 'log',\n    },\n    'linear'\n  )\n\nexport const showAxesKnob = () => boolean('Axes', true)\n\nexport const timeZoneKnob = (initial?: string) =>\n  select(\n    'Time Zone',\n    {\n      UTC: 'UTC',\n      'America/Los_Angeles': 'America/Los_Angeles',\n      'America/New_York': 'America/New_York',\n    },\n    initial || 'UTC'\n  )\n\nexport const tooltipOrientationThresholdKnob = () =>\n  number('tooltipOrientationThreshold', 5)\n"],"mappings":"AASA","sourceRoot":""}